package com.udemy.resources;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Strings;
import com.udemy.core.Bookmark;
import com.udemy.core.User;
import com.udemy.db.BookmarkDAO;
import io.dropwizard.auth.Auth;
import io.dropwizard.hibernate.UnitOfWork;
import io.dropwizard.jersey.params.IntParam;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;


import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.NotFoundException;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import org.apache.commons.beanutils.BeanUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A class to serve bookmarks data to users.
 *
 * @author Dmitry Noranovich javaeeeee (at) gmail (dot) com
 */
@Path("/bookmarks")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class BookmarksResource {

    /**
     * Error message return in the case if PUT request body can not be parsed.
     */
    public static final String WRONG_BODY_DATA_FORMAT
            = "Wrong body data format";
    /**
     * Logger.
     */
    private static final Logger LOGGER
            = LoggerFactory.getLogger(BookmarksResource.class);
    /**
     * DAO to manipulate bookmarks.
     */
    private final BookmarkDAO bookmarkDAO;

    /**
     * Constructor to initialize DAO.
     *
     * @param bookmarkDAO DAO to manipulate bookmarks.
     */
    public BookmarksResource(final BookmarkDAO bookmarkDAO) {
        this.bookmarkDAO = bookmarkDAO;
    }

    /**
     * Method returns all bookmarks stored by a particular user.
     *
     * @param user Authenticated user with whose bookmarks we work.
     * @return list of bookmarks stored by a particular user.
     */
    @GET
    @UnitOfWork
    public List<Bookmark> getBookmarks(@Auth User user) {
        return bookmarkDAO.findByUserId(user.getId());
    }

    /**
     * Method returns single bookmark data.
     *
     * @param id the id of a bookmark.
     * @param user Authenticated user with whose bookmarks we work.
     * @return Optional containing a bookmark or empty Optional if the bookmark
     * was not found.
     */
    @GET
    @Path("/{id}")
    @UnitOfWork
    public Optional<Bookmark> getBookmark(@PathParam("id") IntParam id,
                                          @Auth User user) {
        return bookmarkDAO.findByIdAndUserId(id.get(), user.getId());
    }

    /**
     * Method to add new bookmarks.
     *
     * @param bookmark A bookmark to add
     * @param user Authenticated user with whose bookmarks we work.
     * @return The saved bookmark containing the id generated by the database.
     */
    @POST
    @UnitOfWork
    public Bookmark addBookmark(@Valid @NotNull Bookmark bookmark,
                                @Auth User user) {

        bookmark.setUser(user);
        return bookmarkDAO.save(bookmark);
    }

    /**
     * A method to modify an existing bookmark data.
     *
     * @param id the id of the bookmark to be modified.
     * @param jsonData Modifications in JSON format.
     * @param user Authenticated user with whose bookmarks we work.
     * @return Bookmark with modified fields or throws an exception if bookmark
     * was not found.
     */
    @PUT
    @Path("/{id}")
    @UnitOfWork
    public Bookmark modifyBookmark(@PathParam("id") IntParam id,
                                   String jsonData,
                                   @Auth User user) {

        Bookmark bookmark = findBookmarkOrTrowException(id, user);

        // Update bookmark data
        ObjectMapper objectMapper = new ObjectMapper();
        Map<String, String> changeMap = null;
        try {
            changeMap = objectMapper.readValue(jsonData, HashMap.class);
            purgeMap(changeMap);
            BeanUtils.populate(bookmark, changeMap);
            return bookmarkDAO.save(bookmark);
        } catch (IOException |
                IllegalAccessException |
                InvocationTargetException ex) {
            LOGGER.warn(WRONG_BODY_DATA_FORMAT, ex);
            throw new WebApplicationException(WRONG_BODY_DATA_FORMAT,
                    ex,
                    Response.Status.BAD_REQUEST);
        } finally {
            if (changeMap != null) {
                changeMap.clear();
            }
        }
    }

    /**
     * A method to remove bookmarks.
     *
     * @param id the id of a bookmark to be deleted.
     * @param user Authenticated user with whose bookmarks we work.
     * @return Removed bookmark data or throws an exception if the bookmark with
     * the id provided was not found.
     */
    @DELETE
    @Path("/{id}")
    @UnitOfWork
    public Bookmark deleteBookmark(@PathParam("id") IntParam id,
                                   @Auth User user) {
        Bookmark bookmark
                = findBookmarkOrTrowException(id, user);
        bookmarkDAO.delete(id.get());
        return bookmark;
    }

    /**
     * A method to remove null and empty values from the change map. Necessary
     * if not fields in the changed object are filled.
     *
     * @param changeMap map of object field values.
     */
    protected void purgeMap(final Map<String, String> changeMap) {
        changeMap.remove("id");
        changeMap.entrySet().removeIf(
                entry -> Strings.isNullOrEmpty(entry.getValue())
        );
    }

    /**
     * Method looks for a bookmark by id and User id and returns the bookmark or
     * throws NotFoundException otherwise.
     *
     * @param id the id of a bookmark.
     * @param user the id of the owner.
     * @return Bookmark
     */
    private Bookmark findBookmarkOrTrowException(IntParam id,
                                                 @Auth User user) {
        return bookmarkDAO.findByIdAndUserId(
                id.get(), user.getId()
        ).orElseThrow(()
                -> new NotFoundException("Bookmark requested was not found."));
    }

}